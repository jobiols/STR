
  I want to organize a curso,
  I have to create a product to define the curso

  I create a product
-
  !record {model: product.product, id: product_curso}:
   name: curso
   tot_hs_lecture: 10
   classes_per_week: 1
   hs_lecture: 5
-
  I create a curso
-
  !record {model: curso.curso, id: curso_curso}:
   instance: 1
   product: product_curso
-
  I create a registration for the curso
-
  !record {model: curso.registration, id: curso_registration1}:
   curso_id: curso_curso
   name: test_confirm
   nb_register: 10
-
  I create a second registration for the same curso
-
   !record {model: curso.registration, id: curso_registration2}:
    curso_id: curso_curso
    name: test_cancel
    nb_register: 5
-
  I check if the number of draft inscripciones in the curso view is correct
-
   !assert {model: curso.curso, id: curso_curso ,string: 'the number of draft registration is not correct'}:
     - register_prospect == 15.00
-
   I confirm the registration1
-
   !python {model: curso.registration}: |
     curso_pool = self.pool.get("curso.curso")
     self.registration_open(cr, uid, [ref("curso_registration1")],context=context)
-
   I check that registration is "confirmed"
-
   !assert {model: curso.registration, id: curso_registration1}:
     - state == 'open', "registration should be confirmed."
-
   I check if the number of confirmed registration is correct
-
   !assert {model: curso.curso,id: curso_curso,string: 'the number of confirmed registration is not correct'}:
     - register_current  == 10.00
-
   I close the registration
-
   !python {model: curso.registration}: |
     self.button_reg_close(cr, uid, [ref("curso_registration1")],context=context)
-
    I check if registration is correctly finnished
-
  !assert {model: curso.registration, id: curso_registration1}:
      - state == 'done'
-
   I check if attended registration is correct
-
   !assert {model: curso.curso,id: curso_curso,string: 'the number of registration that attended the curso is not correct'}:
     - register_attended  == 10.00
-
    I cancel the second registration
-
  !python {model: curso.registration}: |
    self.button_reg_cancel(cr, uid, [ref("curso_registration2")],context=context)
-
    I Check that registration is cancelled
-
  !assert {model: curso.registration, id: curso_registration2}:
    - state == 'cancel', "Registration should be cancelled."
-
    I confirm the curso
-
  !python {model: curso.curso}: |
    self.button_curso_confirm(cr, uid, [ref("curso_curso")])
-
     I check that curso is in "confirmed" state.
-
  !assert {model: curso.curso, id: curso_curso}:
    - state == 'confirm', "curso should be confirmed."
-
     I close the curso
-
  !python {model: curso.curso}: |
    self.button_curso_done(cr, uid, [ref("curso_curso")])
-
    Check that curso is in "close" state.
-
  !assert {model: curso.curso, id: curso_curso}:
    - state == 'done', "curso should be Closed."
-
    I reset curso to draft
-
  !python {model: curso.curso}: |
    self.button_curso_draft(cr, uid, [ref("curso_curso")])
-
   In order to test the cancellation of the curso, I create a second curso
-
  !record {model: curso.curso, id: curso_curso1}:
   name: curso_cancel
   date_begin: 2012-01-01 19:05:15
   date_end: 2012-01-01 20:05:15
-
  I create a registration for the curso
-
  !record {model: curso.registration, id: curso_registration_cancel}:
   curso_id: curso_curso1
   name: test_confirm_again
   nb_register: 5
-
    Now I cancel this curso
-
  !python {model: curso.curso}: |
    self.button_curso_cancel(cr, uid, [ref("curso_curso1")])
-
    I check if the curso is cancelled
-
  !assert {model: curso.curso, id: curso_curso1}:
     - state == 'cancel', "curso should be cancelled."
-
    I check if its inscripciones are cancelled too
-
  !assert {model: curso.registration, id: curso_registration_cancel}:
     - state == 'cancel', "Registration should be cancelled."
